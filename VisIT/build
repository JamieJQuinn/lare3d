#! /bin/sh

fmt="CFD"

version=`visit -version 2>&1 | sed 's,.* \([0-9]*\).*,\1,'`
tmpdir=.tmp

clean=0
build_visit_reader=1
build_utilities=0
DBG=""
DEBUG=""
PRIVATE="-private"
VERBOSE=""
OPTS=""

while getopts cdpnuv name
do
   case $name in
      c) clean=1 ; OPTS="$OPTS -c";;
      d) DBG="-g -O0"; OPTS="$OPTS -d";
         DEBUG="-DCMAKE_BUILD_TYPE=Debug" ;;
      p) PRIVATE="-public" ;;
      n) build_visit_reader=0 ;;
      u) build_utilities=1 ;;
      v) VERBOSE="VERBOSE=1" ;;
   esac
done

# Find directory containing the actual visit binary
cwd=`pwd`
cmd=`which visit`
i=0
while [ $i -lt 100 ]; do
  visitpath=`dirname $cmd`
  cd "$visitpath"
  [ "$visitpath"x = "."x ] && visitpath=`pwd`
  cmd=`basename $cmd`
  cmd=`readlink $cmd`
  [ "$cmd"x = x ] && break
  i=$((i+1))
done
cd "$cwd"


export PATH=$visitpath:$PATH
export CXXFLAGS="-Wno-deprecated $DBG"

buildit () {
  rm -rf $tmpdir
  mkdir -p $tmpdir
  if [ "$version"x != x ]; then
    xml2info -clobber $PRIVATE ${fmt}${version}.xml
    rm -rf CMake* cmake* Makefile

    if [ $version -eq 1 ]; then
      xml2makefile -clobber $PRIVATE ${fmt}${version}.xml
      if [ "`uname -s`"x = "Darwinx" -a "`uname -m`"x = "x86_64x" ]; then
        sed "s,\(^CXXFLAGS.*\),\1 -m32 $DBG \
CFLAGS=$(CFLAGSORIG) -m32 $DBG \
PY_CXXFLAGS=-I$(TOPDIR)/include/python,;s,\(^LDFLAGS.*\),\1 -m32 $DBG," Makefile > .Makefile.tmp
        \mv -f .Makefile.tmp Makefile
      fi
    else
      xml2cmake -clobber $PRIVATE ${fmt}${version}.xml
      for f in `grep -w INCLUDE CMakeLists.txt | cut -f2 -d\( | \
          cut -f1 -d\) | tr -d \"`; do
        base=`basename $f`
        sed 's,/[^;]*libmpi[^;]*;,,g;s,/[^;]*libopen-[^;]*;,,g' \
            $f > $tmpdir/$base
        if [ $build_parallel -eq 1 ]; then
          grep -v 'CMAKE_CXX_COMPILER ' $tmpdir/$base | \
              grep -v 'CMAKE_C_COMPILER ' > $tmpdir/tmp
          mv $tmpdir/tmp $tmpdir/$base
        elif [ $build_serial -eq 1 ]; then
          grep -v 'VISIT_PARALLEL ' $tmpdir/$base > $tmpdir/tmp
          mv $tmpdir/tmp $tmpdir/$base
        fi
        sed 's,\(INCLUDE(["]*\)'$f'\(["]*\),\1'$tmpdir/$base'\2,' \
            CMakeLists.txt > $tmpdir/tmp
        mv $tmpdir/tmp CMakeLists.txt
      done
      cmake $DEBUG .
    fi

    make clean
    make $VERBOSE
  else
    echo "Unable to build. Please add visit to your \$PATH"
  fi
}


if [ $clean -eq 1 ]; then
  make clean > /dev/null 2>&1
  rm -rf CMake* cmake* Makefile ${fmt}*Info.C ${fmt}*Info.h
elif [ $build_visit_reader -eq 1 ]; then
  srl=""
  err=0
  build_parallel=0
  build_serial=0
  buildit

  if [ $? -ne 0 ]; then
    build_parallel=1
    echo
    echo "Trying again with mpicc"
    # Execute in a subshell to stop CC being altered in the current shell.
    (export CC=mpicc
    export CXX=mpicxx
    buildit)
    [ $? -ne 0 ] && err=1
    build_parallel=0
  fi

  if [ $err -ne 0 ]; then
    err=0
    build_serial=1
    echo
    echo "Trying again without parallel reader."
    srl=" (Serial version only)."
    buildit
    [ $? -ne 0 ] && err=1
    build_serial=0
  fi

  if [ $err -ne 0 ]; then
    echo "ERROR: Failed to build VisIt reader."
    exit 1
  fi

  echo
  echo "VisIt ${fmt} reader successfully built.${srl}"
fi

[ -x ./extension/build ] && ./extension/build $OPTS
if [ $build_utilities -eq 1 ]; then
  [ -x ./utilities/build ] && ./utilities/build $OPTS
fi

rm -rf $tmpdir
